trigger:
- refs/heads/master
- refs/heads/dev
pr: ['dev']

variables:
  solution: '**/*.sln'
  testProjects: "**/*Tests/*.csproj"
  publishProject: "**/*Tool/*.csproj"
  buildConfiguration: 'Release'
  major: 4
  minor: 2
  patch: 3
  buildnum: $[counter(format('{0}.{1}.{2}',variables['major'],variables['minor'], variables['patch']), 1)]
  version: $(major).$(minor).$(patch).$(buildnum)

stages:
- stage: Build
  pool:
      vmImage: 'windows-latest'
  jobs:
  - job: Build
    steps:
    # .NET 8 runtime is required to execute tests targeting net8.0
    # The .NET 9 SDK can build for .NET 8, but cannot run .NET 8 tests without the runtime
    - task: UseDotNet@2
      displayName: 'Use .NET 8 Runtime'
      inputs:
        packageType: 'runtime'
        version: '8.0.x'
        
    - task: UseDotNet@2
      displayName: 'Use .NET 9 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) /p:BUILD_VERSION=$(version)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        projects: '$(testProjects)'
        arguments: '--configuration $(buildConfiguration) --no-build'
        publishTestResults: true
    
- stage: Publish_Artifacts
  pool:
      vmImage: 'windows-latest'
      
  jobs:
  - job: Publish
    steps:
    # Only SDK needed for publish operations
    - task: UseDotNet@2
      displayName: 'Use .NET 9 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - task: ComponentGovernanceComponentDetection@0
      condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
      displayName: 'component detection'

    - task: notice@0
      condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
      displayName: 'generate NOTICE file'
      inputs:
        outputformat: 'text'

    - task: DownloadBuildArtifacts@0
      condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'NOTICE.txt'
        downloadPath: '$(Build.SourcesDirectory)/bin/notice'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: 'publish'
        projects: '$(publishProject)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --framework net8.0 /p:BUILD_VERSION=$(version)'
        publishWebProjects: false
        zipAfterPublish: True
          
    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack nugets'
      inputs:
        command: pack
        projects: '$(solution)'
        configuration: '$(buildConfiguration)'
        packDirectory: '$(build.artifactStagingDirectory)/nupkgs'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'nuget_version'
      env:
        nuget_version: $(version)

    - task: ManifestGeneratorTask@0
      displayName: 'Generation Task'
      inputs:
        BuildDropPath: '$(build.artifactStagingDirectory)'

    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'publish binary artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'FhirAnonymizerBuild'
        
    - task: PublishBuildArtifacts@1
      displayName: 'publish nuget artifacts'
      inputs:
        pathtoPublish: '$(build.artifactStagingDirectory)/nupkgs'
        artifactName: 'nuget'
        publishLocation: 'container'

- stage: Release
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Release
    pool:
        vmImage: 'windows-latest'
    steps:
    - checkout: none #skip checking out the default repository resource
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Artifacts'
      inputs:
        artifactName: FhirAnonymizerBuild
        downloadPath: $(System.DefaultWorkingDirectory)

    - task: GithubRelease@1 
      displayName: 'Create GitHub Release'      
      inputs:
        gitHubConnection: microsoft
        repositoryName: microsoft/Tools-for-Health-Data-Anonymization
        action: create
        title: v$(major).$(minor).$(patch)
        tagSource: userSpecifiedTag
        tag: v$(major).$(minor).$(patch)    
        assets: |
          $(System.DefaultWorkingDirectory)/FhirAnonymizerBuild/Microsoft.Health.Fhir.Anonymizer.R4.CommandLineTool.zip
          $(System.DefaultWorkingDirectory)/FhirAnonymizerBuild/Microsoft.Health.Fhir.Anonymizer.Stu3.CommandLineTool.zip
          $(System.DefaultWorkingDirectory)/FhirAnonymizerBuild/Microsoft.Health.Dicom.Anonymizer.CommandLineTool.zip
